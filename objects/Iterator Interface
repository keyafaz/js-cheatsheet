
class Matrix {
  constructor(width, height, element = (x, y) => undefined) {
    this.width = width
    this.height = height
    this.content = []

    for (let y = 0; y < height; y++) {
      for (let x = 0; x < width; x++) {
        this.content[y * width + x] = element(x, y)
      }
    }
  }

  get(x, y) {
    return this.content[y * this.width + x]
  }
  
  set(x, y, value) {
    this.content[y * this.width + x] = value
  }

  //sets the Matrix class to be iterable
  [Symbol.iterator]() {
    return new MatrixIterator(this)
  }
}

/**
 * Create a Iterator class
 * what we are interested in: 1. position of elements 2. the elements themselves 
 *
 * will do this by: having iterator produce object with x, y and value properties
 */
 
class MatrixIterator {
  constructor(matrix) {
    this.x = 0
    this.y = 0
    this.matrix = matrix
  }
  next() {
    if (this.y == this.matrix.height) return { done: true }

    let value = {
      x: this.x,
      y: this.y,
      value: this.matrix.get(this.x, this.y)
    }
    this.x++
    if (this.x == this.matrix.width) {
      this.x = 0
      this.y++
    }
    return { value, done: false }
  }
}

let matrix = new Matrix(2, 2, (x, y) => `value ${x},${y}`)
for (let { x, y, value } of matrix) {
  console.log(x, y, value)
}
console.log(matrix)


// sets Matrix class to be iterable using after-the-fact prototype manipulation to add methods to classes instead of declaring directly in class
// Matrix.prototype[Symbol.iterator] = function () {
//   return new MatrixIterator(this)
// }
